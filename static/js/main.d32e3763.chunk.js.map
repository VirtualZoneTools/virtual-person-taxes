{"version":3,"sources":["TaxForm/Input.js","saveReusableData.js","TaxForm/index.js","Preview/index.js","generator.js","App.js","index.js"],"names":["TaxFormInput","field","form","touched","errors","props","className","TextInputField","marginBottom","type","validationMessage","get","name","getReusableData","fullName","localStorage","getItem","address","personalNumber","initialState","transactions","date","amount","undefined","messages","Schema","Yup","shape","min","required","length","of","TaxForm","onSubmit","initialValues","values","actions","setItem","setReusableData","setSubmitting","validationSchema","render","status","isSubmitting","isValid","label","component","placeholder","arrayHelpers","Pane","Heading","size","map","transaction","index","Card","key","elevation","backgroundColor","padding","display","justifyContent","Button","appearance","intent","iconBefore","disabled","onClick","remove","msg","Paragraph","flexDirection","alignItems","push","CrownIcon","height","marginTop","MarkdownPreview","md","source","escapeHtml","skipHtml","dividendTax","x","input","val","generate","allDivident","reduce","acc","allDividentPlusTaxSum","transactionOverviewStr","trim","join","transactionsDeclarationStepsStr","split","App","useState","setMd","background","minHeight","marginX","maxWidth","EditIcon","Preview","overflow","minWidth","generateStepsMD","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d32e3763.chunk.js","sourcesContent":["import React from 'react'\nimport { TextInputField } from 'evergreen-ui'\nimport get from 'lodash.get'\n\nconst TaxFormInput = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div className=\"Input-wrapper\">\n    <TextInputField\n      marginBottom=\"15px\"\n      type=\"text\"\n      {...field}\n      {...props}\n      validationMessage={get(touched, field.name) && get(errors, field.name)}\n    />\n  </div>\n)\n\nexport default TaxFormInput\n","function setReusableData({ fullName, address, personalNumber }) {\n  if (getReusableData().fullName) return\n\n  localStorage.setItem('fullName', fullName)\n  localStorage.setItem('address', address)\n  localStorage.setItem('personalNumber', personalNumber)\n}\n\nfunction getReusableData() {\n  return {\n    fullName: localStorage.getItem('fullName') || '',\n    address: localStorage.getItem('address') || '',\n    personalNumber: localStorage.getItem('personalNumber') || '',\n  }\n}\n\nfunction clearReusableData() {\n  localStorage.clear()\n}\n\nexport { getReusableData, setReusableData, clearReusableData }\n","import React from 'react'\nimport { Formik, Field, FieldArray, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { Button, Pane, Card, Heading, Paragraph, CrownIcon } from 'evergreen-ui'\n\nimport TaxFormInput from './Input'\nimport { getReusableData, setReusableData } from '../saveReusableData'\n\nconst initialState = {\n  ...getReusableData(),\n  transactions: [\n    {\n      date: '',\n      amount: undefined,\n    },\n  ],\n}\n\nconst messages = {\n  required: () => 'აუცილებელი ველი',\n  short: field => `${field} ძალიან მოკლეა`,\n  invalid: field => `არასწორი ${field}`,\n}\n\nconst Schema = Yup.object().shape({\n  fullName: Yup.string()\n    .min(2, messages.short('სახელი'))\n    .required(messages.required()),\n  address: Yup.string()\n    .min(2, messages.short('მისამართი'))\n    .required(messages.required()),\n  personalNumber: Yup.string()\n    .length(11, messages.invalid('პირადი ნომერი'))\n    .required(messages.required()),\n  transactions: Yup.array().of(\n    Yup.object().shape({\n      date: Yup.string()\n        .min(10, 'თარიღი უნდა იყოს DD/MM/YYYY ფორმატში')\n        .required(messages.required()),\n      amount: Yup.number().required(messages.required()),\n    }),\n  ),\n})\n\nconst TaxForm = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={initialState}\n      onSubmit={(values, actions) => {\n        setReusableData(values)\n        onSubmit(values)\n        actions.setSubmitting(false)\n      }}\n      validationSchema={Schema}\n      render={({ status, isSubmitting, isValid, values }) => (\n        <Form>\n          <Field\n            type=\"text\"\n            name=\"fullName\"\n            label=\"სრული სახელი\"\n            component={TaxFormInput}\n            placeholder=\"მაგ. გიორგი მაისურაძე\"\n            required\n          />\n\n          <Field\n            type=\"text\"\n            name=\"address\"\n            label=\"მისამართი\"\n            component={TaxFormInput}\n            placeholder=\"მაგ. რუსთაველის გამზ. 26\"\n            required\n          />\n\n          <Field\n            type=\"text\"\n            name=\"personalNumber\"\n            label=\"პირადი ნომერი\"\n            component={TaxFormInput}\n            placeholder=\"მაგ. 01101899998\"\n            required\n          />\n\n          <FieldArray\n            name=\"transactions\"\n            render={arrayHelpers => (\n              <Pane>\n                <Heading size={400} marginBottom=\"15px\">\n                  ტრანზაქციები\n                </Heading>\n\n                {values.transactions &&\n                  values.transactions.length > 0 &&\n                  values.transactions.map((transaction, index) => (\n                    <Card\n                      key={index}\n                      elevation={0}\n                      backgroundColor=\"white\"\n                      padding=\"15px\"\n                      marginBottom=\"15px\"\n                    >\n                      <Heading size={300} marginBottom=\"15px\">\n                        ტრანზაქცია #{index + 1}\n                      </Heading>\n\n                      <Field\n                        type=\"string\"\n                        name={`transactions.${index}.date`}\n                        label=\"თარიღი\"\n                        component={TaxFormInput}\n                        placeholder=\"მაგ. 02/03/2019\"\n                        required\n                      />\n\n                      <Field\n                        type=\"number\"\n                        name={`transactions.${index}.amount`}\n                        label=\"დივიდენდის რაოდენობა\"\n                        component={TaxFormInput}\n                        placeholder=\"მაგ. 10000\"\n                        required\n                      />\n\n                      <Pane display=\"flex\" justifyContent=\"flex-end\">\n                        <Button\n                          type=\"button\"\n                          appearance=\"minimal\"\n                          intent=\"danger\"\n                          iconBefore=\"remove\"\n                          disabled={values.transactions.length === 1}\n                          onClick={() => arrayHelpers.remove(index)}\n                        >\n                          ტრანზაქციის წაშლა\n                        </Button>\n                      </Pane>\n                    </Card>\n                  ))}\n\n                {status && status.msg && <Paragraph>{status.msg}</Paragraph>}\n\n                <Pane\n                  display=\"flex\"\n                  flexDirection=\"column\"\n                  justifyContent=\"space-between\"\n                  alignItems=\"center\"\n                >\n                  <Button\n                    type=\"button\"\n                    appearance=\"minimal\"\n                    intent=\"success\"\n                    iconBefore=\"add\"\n                    onClick={() => arrayHelpers.push('')}\n                  >\n                    ტრანზაქციის დამატება\n                  </Button>\n\n                  <Button\n                    iconBefore={CrownIcon}\n                    appearance=\"primary\"\n                    height={40}\n                    marginTop=\"15px\"\n                    type=\"submit\"\n                    disabled={isSubmitting || !isValid}\n                  >\n                    ინსტრუქციების დაგენერირება\n                  </Button>\n                </Pane>\n              </Pane>\n            )}\n          />\n        </Form>\n      )}\n    />\n  )\n}\n\nexport default TaxForm\n","import React from 'react'\nimport ReactMarkdown from 'react-markdown/with-html'\n\nconst MarkdownPreview = ({ md }) => {\n  return <ReactMarkdown source={md} escapeHtml={false} skipHtml={false} />\n}\n\nexport default MarkdownPreview\n","const dividendTax = x => (x / 95) * 5\nconst input = val => `<input value=\"${val}\"/>`\nconst generate = function({ fullName, address, personalNumber, transactions }) {\n  const allDivident = transactions.reduce((acc, x) => acc + x.amount, 0)\n  const allDividentTax = dividendTax(allDivident)\n  const allDividentPlusTaxSum = allDivident + allDividentTax\n  const transactionOverviewStr = transactions\n    .map(({ amount, date }) =>\n      `\n1. ${date} - ${amount + dividendTax(amount)} ლარიდან, ${amount} არის დივიდენდი, ხოლო ${dividendTax(\n        amount,\n      )} გადასახადი.\n`.trim(),\n    )\n    .join('\\n')\n  const transactionsDeclarationStepsStr = transactions\n    .map(({ amount, date }) =>\n      `\n1. ველში **განაცემის მიმღების საიდენტ. ნომერი** ჩაწერე ${input(personalNumber)}\n1. ველში **სახელი** ჩაწერე ${input(fullName.split(' ')[0])}\n1. ველში **გვარი** ჩაწერე ${input(fullName.split(' ')[1])}\n1. ველში **მისამართი** ჩაწერე **${input(address)}**\n1. ველში **პირის რეზიდენტობა (ქვეყანა)** ჩაწერე **${input('საქართველო')}**\n1. ველში **შემოსავლის მიმღებ პირთა კატეგორია** აირჩიე **${input(1.4)}: სხვა ფიზიკური პირები**\n1. ველში **განაცემის სახე** აირჩიე **${input('დივიდენდი')}**\n1. ველში **განაცემის თანხა(ლარი)** ჩაწერე **${input(amount + dividendTax(amount))}**\n1. ველში **შეღავათის ოდენობა** ჩაწერე **${input(0)}**\n1. ველში **გაცემის თარიღი** შეიყვანე თარიღი **${input(date)}**\n1. ველში **წყაროსთან დასაკავებელი გადასახადის განაკვეთი** აირჩიე **${input(5)}**\n1. ველში **დაკავებული გადასახადი (ლარი)** ჩაწერე **${input(dividendTax(amount))}**\n1. დააჭირე ღილასკს დამატება, იკონით **+**\n`.trim(),\n    )\n    .join('\\n')\n  return `\n# მიმოხილვა\nტრანზაქციები რომლის დეკლარირებასაც ვახდენთ:\n\n${transactionOverviewStr}\n\n# დეკლარაციის შევსება\n1. გადადი გვერდზე eservices.rs.ge და გაიარე ავტორიზებას\n1. გადადი გვერდზე __დეკლარაციები__\n\n## მოგება\n1. გადადი გვერდზე **ყოველთვიური > მოგების გადასახადი**\n1. დაკლიკე ღილაკზე **ახალი დეკლარაცია**\n1. ველში **ეკონომიკური საქმიანობის (NACE) კოდი სრულად** შეიყვანე **${input(\n    62020,\n  )} (საკონსულტაციო საქმიანობები კომპიუტერული ტექნოლოგიების დარგში)** (მხოლოდ რიცხვის აკრეფა საკმარისია)\n1. **რეზიდენტი საწარმო** მონიშული დატოვე\n1. დააკლიკე დამატების ღილაკს, იკონით **+**\n1. ზემოთ დააჭირე ღილაკს **2** რათა გადახვიდე მეორე გვერდზე\n1. ველში **16.1 განაწილებული დივიდენდი, მათ შორის** ჩაწერე **${input(allDividentPlusTaxSum)}**\n1. ველში **22. მოგების გადასახადისგან გათავისუფლებული მოგების განაწილება, გაწეული ხარჯი, განხორციელებული განაცემი** ჩაწერე **${input(\n    allDividentPlusTaxSum,\n  )}**\n1. დასქროლე გვერდის ბოლოშ და დააჭირე ღილაკს **შენახვა**\n1. ასქროლე სულ ზემოთ და დააჭირე გათიშვის ღილაკს იკონით **x**\n\n##  განაცემთა ინფორმაცია\n*აღარ ივსება *01/01/2020*-დან.*\n\n## საშემოსავლო\n1. გადავდივართ გვერდზე **ყოველთვიური > საშემოსავლო (გადახდის წყაროსთან დაკავებული გადასახადი)**\n1. დაკლიკე ღილაკზე **ახალი დეკლარაცია**\n1. **გადამხდელის ტიპი** აირჩიე **სხვა**\n1. ველში **ეკონომიკური საქმიანობის (NACE) კოდი სრულად** შეიყვანე **${input(\n    62020,\n  )} (საკონსულტაციო საქმიანობები კომპიუტერული ტექნოლოგიების დარგში)** (მხოლოდ რიცხვის აკრეფა საკმარისია)\n1. დააკლიკე დამატების ღილაკს, იკონით **+**\n1. ზემოთ დააჭირე ღილაკს **2** რათა გადახვიდე მეორე გვერდზე\n${transactionsDeclarationStepsStr}\n1. დასქროლე გვერდის ბოლოში და დააჭირე ღილაკს **შენახვა**\n1. ასქროლე სულ ზემოთ და დააჭირე გათიშვის ღილაკს იკონით **x**\n\n# დეკლარაციების წარდგენა\n1. გადავდივარ გვერდზე **სტატისტიკა > გადასაგზავნი დეკლარაციები**\n1. შედიხარ ყველა დელკარაციაში\n1. აკლიკავ **შემდეგს** მანამ სანამ არ გამოჩნდება ღილაკი **გადაგზავნა**\n1. აკლიკავ ღილაკს **გადაგზავნა**`\n}\n\nexport default generate\n","import React, { useState } from 'react'\nimport { Pane, Card, Heading, Button, EditIcon } from 'evergreen-ui'\n\nimport TaxForm from './TaxForm'\nimport Preview from './Preview'\nimport generateStepsMD from './generator'\n\nfunction App() {\n  const [md, setMd] = useState()\n\n  return (\n    <Pane background=\"tint2\" minHeight=\"100vh\" padding=\"30px\">\n      {md ? (\n        <Card elevation={2} marginX=\"auto\" maxWidth=\"960px\" padding=\"15px\" background=\"white\">\n          <Button iconBefore={EditIcon} appearance=\"minimal\" onClick={() => setMd(null)}>\n            ფორმის ჩასწორება\n          </Button>\n\n          <Preview md={md} />\n        </Card>\n      ) : (\n        <Pane display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n          <Heading size={400} marginBottom=\"15px\">\n            ინსტრუქციის მისაღებად შეავსეთ ფორმა\n          </Heading>\n\n          <Card\n            elevation={2}\n            background=\"tint1\"\n            padding=\"15px\"\n            overflow=\"auto\"\n            minWidth=\"360px\"\n            maxWidth=\"600px\"\n          >\n            <TaxForm onSubmit={values => setMd(generateStepsMD(values))} />\n          </Card>\n        </Pane>\n      )}\n    </Pane>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}